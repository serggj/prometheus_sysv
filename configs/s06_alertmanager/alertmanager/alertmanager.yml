route:
  group_by: [ 'cluster', 'job', 'alertname' ]
  # If an alert isn't caught by a route, send it slack.
  receiver: slack_general
  repeat_interval: 12h
  group_wait: 30s
  group_interval: 5m
  routes:
    - match:
        severity: critical
      group_wait: 30s
      group_interval: 1m
      receiver: slack_general

inhibit_rules:
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    # Apply inhibition if the alertname is the same.
    equal: ['alertname']

  - source_match: 
      alertname: MongoInstanceDown
    target_match: 
      alertname: InstanceDown 
    equal: ['alertname'] 

  - source_match: 
      alertname: HaproxyBackendDown
    target_match: 
      alertname: HaproxyServerDown
#    equal: ['alertname'] 


receivers:
  - name: slack_general
    slack_configs:
      - send_resolved: true
        api_url: 
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
        text: >-
          {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
            *Description:* {{ .Annotations.description }}
            *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}

